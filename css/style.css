/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* Basic Reset
    - Normalize that CSS in order to make a cross-browser reset.
    - So in order to make every browser render the pages in the exact same way.
    - Reset using universal selector.
*/
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box; /* border-box includes padding and border in the width and height of an element. */
}

/* Set Overall font properties on the entire web page
    - properties related to fonts, such as font-family, font-size, line-height, etc. are usually inherited from the body element.
*/
body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7; /* this is a unitless number that represents the line-height as a multiple of the font-size. */
  color: #777; /* color of the text */
  padding: 3rem; /* this is a shorthand property that sets the padding for all four sides of an element at once. rem means */
}

.header {
  height: 95vh; /* vh is a unit that represents 1% of the viewport height. */
  background-image: linear-gradient(
      to right bottom,
      hsla(111, 55%, 64%, 0.8),
      hsla(160, 64%, 43%, 0.8)
    ),
    url(../img/hero.jpg);
  background-size: cover;
  background-position: top center;
  position: relative; /* this is a property that specifies the positioning scheme for an element. This is the origin, the reference. */

  clip-path: polygon(
    0 0,
    100% 0,
    100% 75vh,
    0 100%
  ); /* 
  clip-path is a CSS property that allows you to define a custom shape for an element. 
    - polygon functions needs a list of points (coordinates) that define the shape of the polygon. clockwise order.
  */
}

.logo-box {
  position: absolute; /* absolute positioning allows you to position an element relative to its nearest positioned ancestor. */
  top: 40px;
  left: 40px;
}

.logo {
  height: 35px; /* prefer to specify the height of an image (the elements) rather than the width. the width will set auto. */
}

.text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(
    -50%,
    -50%
  ); /* translate is a CSS transform function that moves the center of an element itself along the x and y axes. */
}
.heading-primary {
  color: #fff;
  text-transform: uppercase;

  /* this property determines if the back part of an element, when we transform it, is visible or hidden. */
  backface-visibility: hidden;
}

.heading-primary-main {
  display: block; /* I want for each span to take line for itself. each block has its own properties. */
  font-size: 60px;
  font-weight: 400;
  letter-spacing: 36px;

  /* 
  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out; how the time tof the animation goes 
  */
  animation: moveInLeft 1s ease-out;
  /* 
   
  animation-delay: 3s; animation executed 3 times
  animation-iteration-count: 3; wait 3 seconds and then Start!
  */
}

.heading-primary-sub {
  display: block; /* I want for each span to take line for itself. each block has its own properties. */
  font-size: 20px;
  font-weight: 700;
  letter-spacing: 17.8px;

  animation: moveInRight 1s ease-out; /* Shortened animation line*/
}

/* Animations */
/* For the browser performance, it's the best to only ever animate
  2 different properties Opacity and Transform.
*/
@keyframes moveInLeft {
  /* In HERE, I can specify what I want to happen 
     in each moment of time of the animation 
  */

  /* BEFORE ANIMATION STARTS */
  0% {
    opacity: 0; /* make it invisible */
    transform: translateX(-100px); /* animate from left to right */
  }

  80% {
    opacity: 1; /* gradually make it visible as it moves in */
    transform: translateX(10px); /* add a slight overshoot effect */
  }
  /* AFTER ANIMATIONS FINISHES */
  100% {
    opacity: 1; /* make it visible */
    transform: translate(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(100px);
  }

  80% {
    opacity: 1;
    transform: translateX(-10px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

/* :link is a pseudo-class. A pseudo-class is a special state of a selector 
  So we pseudo-classes to style elements under special conditions. 
*/
.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 15px 40px; /*top,bottom  right,left*/

  /* this way, the box model works on this element as if it was just a normal block element. 
  we do inline when we do some padding or margin*/
  display: inline-block;
}

.btn-white {
  background-color: #fff;
  color: #777;
}
